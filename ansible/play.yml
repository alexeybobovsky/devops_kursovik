---
- hosts: all
  become: yes
  tasks:
   - name: install Docker
     apt:
       name: docker.io
       state: present
       update_cache: true

   - name: install APT Transport HTTPS
     apt:
       name: apt-transport-https
       state: present

   - name: add Kubernetes apt-key
     apt_key:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       state: present

   - name: add Kubernetes' APT repository
     apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: 'kubernetes'

   - name: install kubelet
     apt:
       name: kubelet=1.19.16-00
       state: present
       update_cache: true

   - name: install kubeadm
     apt:
       name: kubeadm=1.19.16-00
       state: present

- hosts: master
  become: yes
  tasks:
   - name: install kubectl
     apt:
       name: kubectl=1.19.16-00
       state: present
       force: yes

   - name: initialize the cluster
     shell: kubeadm init --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt
     args:
       chdir: $HOME
       creates: cluster_initialized.txt

   - name: create .kube directory
     become: yes
     become_user: ubuntu
     file:
       path: $HOME/.kube
       state: directory
       mode: 0755

   - name: copy admin.conf to user's kube config
     copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/ubuntu/.kube/config
       remote_src: yes
       owner: ubuntu

   - name: install Pod network
     become: yes
     become_user: ubuntu
     shell: |
        curl https://docs.projectcalico.org/manifests/calico.yaml -O
        sed -i 's/# - name: CALICO_IPV4POOL_CIDR/- name: CALICO_IPV4POOL_CIDR/;s/#   value: "192.168.0.0\/16"/  value: "10.244.0.0\/16"/' calico.yaml
        kubectl apply -f calico.yaml
     args:
       chdir: $HOME


- hosts: master
  become: yes
  gather_facts: false
  tasks:
  - name: get join command
    shell: kubeadm token create --print-join-command
    register: join_command_raw

  - name: set join command
    set_fact:
      join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: worker
  become: yes
  vars:
    join_command_in_worker: "{{ hostvars[groups['master'][0]]['join_command'] }}"
  tasks:
  #    - name: show masters IP
  #      debug:
  #        msg: "var is {{ join_command_in_worker }}"
  #    - name: test cicle
  #      {% for host in groups['master'] %}
  #        {{ hostvars[host].join_command }}
  #      {% endfor %}

  - name: join cluster
    shell: " {{ join_command_in_worker }} >> node_joined.txt"
    args:
      chdir: $HOME
      creates: node_joined.txt
  #      when: join_command_in_worker is defined
